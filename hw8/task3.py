"""
3. Создайте собственный класс-исключение, который должен проверять содержимое
списка на наличие только чисел. Проверить работу исключения на реальном примере.
Необходимо запрашивать у пользователя данные и заполнять список.
Класс-исключение должен контролировать типы данных элементов списка.
Примечание: длина списка не фиксирована. Элементы запрашиваются бесконечно,
пока пользователь сам не остановит работу скрипта, введя, например, “stop”.
При этом скрипт завершается, сформированный список выводится на экран.
Подсказка: для данного задания примем, что пользователь может вводить только
числа и строки. При вводе пользователем очередного элемента необходимо
реализовать проверку типа элемента и вносить его в список,
только если введено число. Класс-исключение должен не позволить пользователю
ввести текст (не число) и отобразить соответствующее сообщение.
При этом работа скрипта не должна завершаться.
"""
numbers = []
print("Введите числа, каждое с новой строки, или stop для окончания ввода.")


class Validator(Exception):
    text = "Неверный формат, повторите: "

    @classmethod
    def convert(cls, number):
        try:
            return float(number)
        except ValueError:
            raise cls()


user_input = None
while not user_input == 'stop':
    prompt = ": "
    if user_input:
        try:
            numbers.append(Validator.convert(user_input))
        except Validator as e:
            prompt = e.text
    user_input = input(prompt).strip()

result = ', '.join(map(lambda x: f"{x:n}", numbers))
print(f"Введены числа: {result}")
